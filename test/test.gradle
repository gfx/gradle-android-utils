apply from: '../build.gradle'

task check

private def tempFile(String name) {
    def f = file(name)
    f.deleteOnExit()
    return f
}

check.dependsOn(task("iconToGrayScale") << {
    def inputFile = file("data/ic_launcher.png")
    def outputFile = tempFile("gray.png")
    iconToGrayScale(inputFile, outputFile)
    assert outputFile.exists()
})

check.dependsOn(task("initSdkDir") << {
    def localPropFile = tempFile("local.properties")
    initSdkDir()
    assert localPropFile.exists()
})

check.dependsOn(task("makeDummyFile") << {
    def doesMakeDummyFile = {
        def dummyTemplate = file('data/template.example')
        def dummyOutFile = file('data/template')
        makeDummyFile(dummyTemplate, dummyOutFile)
        def isComplete = dummyOutFile.exists() && dummyTemplate.readBytes() == dummyOutFile.readBytes()
        dummyOutFile.delete()
        return isComplete
    }()
    assert doesMakeDummyFile

    def doesMakeDummyFileWithDeepDirectory = {
        def dummyTemplate = file('data/template.example')
        def dummyOutFile = file('data/deep/directory/template')
        makeDummyFile(dummyTemplate, dummyOutFile)
        def isComplete = dummyOutFile.exists() && dummyTemplate.readBytes() == dummyOutFile.readBytes()
        dummyOutFile.delete()
        return isComplete
    }()
    assert doesMakeDummyFileWithDeepDirectory

    def doesCatchFIleNotFoundException = {
        try {
            def dummyTemplate = file('data/asdfghjkl.example')
            def dummyOutFile = file('data/template')
            makeDummyFile(dummyTemplate, dummyOutFile)
        } catch (FileNotFoundException e) {
            return true
        }
        return false
    }()
    assert doesCatchFIleNotFoundException

})

check.dependsOn(task("writeResources") << {
    def resFile = tempFile("test.xml")
    writeResources(resFile, [foo: "aaa", bar: true, baz: 123])
    assert resFile.exists()
    def records = new XmlParser().parse(resFile)
    assert records.name() == "resources"
    assert records.children().size() == 3
    def foo = records.children().get(0)
    assert foo.name() == "string"
    assert foo.@name == "foo"
    assert foo.text() == "aaa"
    def bar = records.children().get(1)
    assert bar.name() == "bool"
    assert bar.@name == "bar"
    assert bar.text() == "true"
    def baz = records.children().get(2)
    assert baz.name() == "integer"
    assert baz.@name == "baz"
    assert baz.text() == "123"
})

check.dependsOn(task("readVersion") << {
    def versionFile = tempFile("VERSION")
    versionFile.write("1.2.30")
    def v = readVersion(versionFile)
    assert v.major == 1
    assert v.minor == 2
    assert v.patchLevel == 30
    assert v.toVersionName() == "1.2.30"
    assert v.toVersionCode() == 1002030
    assert v.toString() == "1.2.30 (1002030)"
})

